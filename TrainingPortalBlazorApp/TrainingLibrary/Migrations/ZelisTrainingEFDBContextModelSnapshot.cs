// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingLibrary.Models;

#nullable disable

namespace TrainingLibrary.Migrations
{
    [DbContext(typeof(ZelisTrainingEFDBContext))]
    partial class ZelisTrainingEFDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrainingLibrary.Models.Employee", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnType("char(6)");

                    b.HasKey("EmpId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Technology", b =>
                {
                    b.Property<string>("TechnologyId")
                        .HasColumnType("char(6)");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Trainee", b =>
                {
                    b.Property<string>("TrainingId")
                        .HasColumnType("char(6)");

                    b.Property<string>("EmpId")
                        .HasColumnType("char(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.HasKey("TrainingId", "EmpId");

                    b.HasIndex("EmpId");

                    b.ToTable("Trainee");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Trainer", b =>
                {
                    b.Property<string>("TrainerId")
                        .HasColumnType("char(6)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainer");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Training", b =>
                {
                    b.Property<string>("TrainingId")
                        .HasColumnType("char(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("TechnologyId")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.HasKey("TrainingId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Trainee", b =>
                {
                    b.HasOne("TrainingLibrary.Models.Employee", "Employee")
                        .WithMany("TrainingsAttended")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingLibrary.Models.Training", "Training")
                        .WithMany("Trainees")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Training", b =>
                {
                    b.HasOne("TrainingLibrary.Models.Technology", "Technology")
                        .WithMany("Trainings")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingLibrary.Models.Trainer", "Trainer")
                        .WithMany("Trainings")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Employee", b =>
                {
                    b.Navigation("TrainingsAttended");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Technology", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Trainer", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("TrainingLibrary.Models.Training", b =>
                {
                    b.Navigation("Trainees");
                });
#pragma warning restore 612, 618
        }
    }
}
